(dp0
S'buildDestination'
p1
VZ:\u005chome\u005cmlayzell\u005cCode\u005celectron-game\u005celectron-quick-start\u005cgame2.html
p2
sS'saveDestination'
p3
VZ:\u005chome\u005cmlayzell\u005cCode\u005celectron-game\u005celectron-quick-start\u005cgame2.tws
p4
sS'metadata'
p5
(dp6
sS'target'
p7
S'sugarcane'
p8
sS'storyPanel'
p9
(dp10
S'widgets'
p11
(lp12
(dp13
S'selected'
p14
I00
sS'pos'
p15
(lp16
I10
aI10
asS'passage'
p17
(itiddlywiki
Tiddler
p18
(dp20
S'text'
p21
VThis is game 2\u000a[[Read Global State]]
p22
sS'title'
p23
VStart
p24
sS'modified'
p25
ctime
struct_time
p26
((I2017
I12
I7
I17
I7
I15
I3
I341
I0
tp27
(dp28
tp29
Rp30
sS'tags'
p31
(lp32
Vmytemplate
p33
asS'created'
p34
g26
((I2017
I12
I6
I23
I11
I0
I2
I340
I0
tp35
(dp36
tp37
Rp38
sbsa(dp39
g14
I00
sg15
(lp40
I10
aI150
asg17
(itiddlywiki
Tiddler
p41
(dp42
g21
VGame 2
p43
sg23
VStoryTitle
p44
sg25
g26
((I2017
I12
I7
I1
I40
I51
I3
I341
I0
tp45
(dp46
tp47
Rp48
sg31
(lp49
sg34
g26
((I2017
I12
I6
I23
I11
I0
I2
I340
I0
tp50
(dp51
tp52
Rp53
sbsa(dp54
g14
I00
sg15
(lp55
I10
aI290
asg17
(itiddlywiki
Tiddler
p56
(dp57
g21
S'Anonymous'
p58
sg23
S'StoryAuthor'
p59
sg25
g26
((I2017
I12
I6
I23
I11
I0
I2
I340
I0
tp60
(dp61
tp62
Rp63
sg31
(lp64
sg34
g63
sbsa(dp65
g14
I00
sg15
(lp66
I280
aI13
asg17
(itiddlywiki
Tiddler
p67
(dp68
g21
V// This script is used to monkey patch the Twine runtime into understanding the\u000a// concept of global variables. It exports no additional concepts from the game\u000a// world.\u000a\u000a(() => {\u000a  // Record some information in the global scope about where to find the\u000a  // "global" state object.\u000a  let glbl = window;\u000a  while (glbl.opener) { glbl = glbl.opener; }\u000a  window.top_window = glbl;\u000a\u000a  // Stash a reference to this window in the `remote` object.\u000a  window.remote = window.top_window.remote || {};\u000a  window.remote[window.name || "main"] = window;\u000a\u000a  // Match the behaviour of the built-in Wikifier variable matcher, except look\u000a  // for a g_ at the beginning of the variable name.\u000a  let global_var = "\u005c\u005c$g_((?:" +\u000a      Wikifier.textPrimitives.anyLetter.replace("\u005c\u005c-", "") +\u000a      ")*)" + Wikifier.textPrimitives.unquoted;\u000a\u000a  // We're going to need to monkey-patch the Wikifier.parse method, which\u000a  // handles transforming variables (like "$foo") into actual JS code.\u000a  let old_parser = Wikifier.parse;\u000a  Wikifier.parse = function(input) {\u000a    // This part is based on the source code for Wikifier.parse\u000a    // https://github.com/tweecode/twine/blob/f0e6caf4b3857cccdb4043313997dda36f55dd06/targets/engine.js#L1489-L1521\u000a\u000a    let output = input;\u000a\u000a    // Extract all variables & initialize them to 0 if they're undefined\u000a    let init_re = new RegExp(global_var, "gi");\u000a    let found = [];\u000a    let m;\u000a    while ((m = init_re.exec(input))) {\u000a      if (found.indexOf(m[0]) === -1) {\u000a        output = m[0] + " == null && (" + m[0] + " = 0);" + output;\u000a        found.push(m[0]);\u000a      }\u000a    }\u000a\u000a    // Rewrite $var into valid JS code\u000a    let pat = "top_window.state.history[0].variables.$1";\u000a    output = output.replace(new RegExp(global_var, "gi"), pat);\u000a\u000a    // And now we can call the version we're patching\u000a    return old_parser.call(this, output);\u000a  };\u000a})();\u000a
p69
sg23
Vaaaaaa_InitGlobalVarState
p70
sg25
g26
((I2017
I12
I7
I12
I31
I58
I3
I341
I0
tp71
(dp72
tp73
Rp74
sg31
(lp75
Vscript
p76
asg34
g26
((I2017
I12
I6
I23
I11
I19
I2
I340
I0
tp77
(dp78
tp79
Rp80
sbsa(dp81
g14
I00
sg15
(lp82
F145.0
aF12.0
asg17
(itiddlywiki
Tiddler
p83
(dp84
g21
VReading $g_foo gets me <<print $g_foo>>.\u000a[[Start]]
p85
sg23
VRead Global State
p86
sg25
g26
((I2017
I12
I7
I22
I15
I19
I3
I341
I0
tp87
(dp88
tp89
Rp90
sg31
(lp91
Vmytemplate
p92
asg34
g26
((I2017
I12
I6
I23
I21
I36
I2
I340
I0
tp93
(dp94
tp95
Rp96
sbsa(dp97
g14
I00
sg15
(lp98
F145.0
aF153.0
asg17
(itiddlywiki
Tiddler
p99
(dp100
g21
VWOOOO How did you get here?\u000a[[Start]]
p101
sg23
VHidden Passage
p102
sg25
g26
((I2017
I12
I7
I22
I15
I25
I3
I341
I0
tp103
(dp104
tp105
Rp106
sg31
(lp107
Vmytemplate
p108
asg34
g26
((I2017
I12
I7
I1
I33
I41
I3
I341
I0
tp109
(dp110
tp111
Rp112
sbsa(dp113
g14
I00
sg15
(lp114
F143.0
aF291.0
asg17
(itiddlywiki
Tiddler
p115
(dp116
g21
V<div class="titlebar"><div class="logo"><span>N</span></div><button onclick="window.close()">x</button></div><<body>>
p117
sg23
Vmytemplate
p118
sg25
g26
((I2017
I12
I7
I22
I23
I38
I3
I341
I0
tp119
(dp120
tp121
Rp122
sg31
(lp123
Vtemplate
p124
asg34
g26
((I2017
I12
I7
I17
I3
I56
I3
I341
I0
tp125
(dp126
tp127
Rp128
sbsa(dp129
g14
I00
sg15
(lp130
F410.0
aF13.0
asg17
(itiddlywiki
Tiddler
p131
(dp132
g21
V// A small script for applying a template to tagged passages.\u000a// Re-writes passages at startup, replacing the <<body>> \u000a// macro in the template with the original passage.\u000a\u000alet templates = tale.lookup("tags", "template");\u000afor (let i = 0; i < templates.length; ++i) {\u000a  let template = templates[i];\u000a\u000a  let modify = tale.lookup("tags", template.title);\u000a  for (let j = 0; j < modify.length; ++j) {\u000a    let passage = modify[j];\u000a    passage.tags = \u000a      passage.tags.filter(tag => tag != template.title);\u000a    passage.text = template.text.replace("<<body>>", passage.text);\u000a  }\u000a}
p133
sg23
VApplyTemplates
p134
sg25
g26
((I2017
I12
I7
I22
I17
I19
I3
I341
I0
tp135
(dp136
tp137
Rp138
sg31
(lp139
Vscript
p140
asg34
g26
((I2017
I12
I7
I17
I8
I43
I3
I341
I0
tp141
(dp142
tp143
Rp144
sbsa(dp145
g14
I00
sg15
(lp146
I277
aI145
asg17
(itiddlywiki
Tiddler
p147
(dp148
g21
V/* Your story will use the CSS in this passage to style the page.\u000aGive this passage more tags, and it will only affect passages with those tags.\u000aExample selectors: */\u000a\u000a#sidebar {\u000a	display: none;\u000a}\u000a\u000a#passages {\u000a	position: fixed;\u000a	top: 50px;\u000a	left: 0px;\u000a	right: 0px;\u000a	bottom: 0px;\u000a	background-color: #000;\u000a    padding: 10px;\u000a    margin: 0px;\u000a	border-left: 1px solid;\u000a	border-right: 1px solid;\u000a	border-bottom: 1px solid;\u000a    border-bottom-right-radius: 10px;\u000a	border-bottom-left-radius: 10px;\u000a}\u000a\u000abody {\u000a	background: transparent;\u000a	margin: 0px;\u000a	padding: 0px;\u000a}\u000a\u000a.titlebar {\u000a    position: fixed;\u000a    top: 30px;\u000a	left: 0;\u000a	right: 0;\u000a	height: 20px;\u000a    background-color: #66f;\u000a    -webkit-app-region: drag;\u000a	-webkit-user-select: none;\u000a}\u000a.titlebar > a {\u000a	position: fixed;\u000aright: 0px;\u000atop: 30px;\u000awidth: 20px;\u000aheight: 20px;\u000aborder-radius: 10px;\u000abackground-color: #f00;\u000a/*-webkit-user-select: yes;*/\u000a\u000a}\u000a\u000a.logo {\u000a    position: fixed;\u000a	top: 0px;\u000a	left: 0px;\u000a	width: 60px;\u000a	height: 60px;\u000a	border-radius: 30px;\u000a	background-color: #f00;\u000a	display: table;\u000a	-webkit-app-region: drag;\u000a	-webkit-user-select: none;\u000a	font-size: 40px;\u000a	text-align: center;\u000a}\u000a\u000a.logo > span {\u000a	display: table-cell;\u000a	vertical-align: middle;\u000a	line-height: normal;\u000a}
p149
sg23
VStyle
p150
sg25
g26
((I2017
I12
I7
I22
I21
I56
I3
I341
I0
tp151
(dp152
tp153
Rp154
sg31
(lp155
Vstylesheet
p156
asg34
g26
((I2017
I12
I7
I18
I17
I1
I3
I341
I0
tp157
(dp158
tp159
Rp160
sbsasS'scale'
p161
I1
sS'snapping'
p162
I00
ss.